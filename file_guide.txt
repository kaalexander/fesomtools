*****INTERACTIVE/GENERAL PLOTS*****
Important note: Before running any FESOM plotting scripts, make sure you edit
                the rotation parameters alpha, beta, and gamma inside
		unrotate_grid.py and unrotate_vector.py to suit your mesh. If
		you're running with a non-rotated mesh, set them all to zero.

fesom_vis.py: Command-line interface for interactive plots.
              To run: Open python or ipython and type "run fesom_vis.py".
	              The script will ask you what kind of plot you want
		      (lon-lat or lat-depth) and will then ask you for more
		      information (file paths, variable names, whether to
		      save the plot or display it on screen, etc) as necessary.
		      When the plot is finished it will ask you for changes
		      to the settings, so you don't have to type them all in
		      again if only a few have changed, and will repeat this
		      as many times as you want.

lonlat_plot.py: Creates a lon-lat (i.e. horizontal) plot, either a global
                Cartesian projection or a circumpolar Antarctic projection.
		You can plot the given variable at the surface, at the bottom,
		at a specific depth, vertically averaged throughout the entire
		water column, or vertically averaged between two specific
		depths.
		To run: This script can be called by fesom_vis.py, but you can
		        also call it directly by opening python or ipython and
			typing "from lonlat_plot import *" followed by
			"lonlat_plot(args)" where args are the input arguments
			as described in detail near the top of the file. Note
			that these arguments include "elements" and "patches";
			to get these you will need to call the function
			function "make_patches" in patches.py.

zonal_avg_plot.py: Creates a latitude-depth plot of a zonally averaged variable
                   (can be averaged along all longitudes or between two
		   specific longitudes).
		   To run: This script can be called by fesom_vis.py, but you
		           can also call it directly by opening python or
			   ipython and typing "from zonal_avg_plot import *"
			   followed by "zonal_avg_plot(args)" where args are
			   the input arguments as described in detail near the
			   top of the file.

zonal_slice_plot.py: Creates a latitude-depth plot at a specific longitude
                     slice.
                     To run: This script can be called by fesom_vis.py, but you
		             can also call it directly by opening python or
			     ipython and typing "from zonal_slice_plot import *"
			     followed by "zonal_slice_plot(args)" where args
			     are the input arguments as described in detail
			     near the top of the file.


*****SPECIFIC PLOTS*****

grid_res.py: Plots the horizontal grid resolution (square root of the area of
             each triangular element) for the given FESOM mesh.
	     To run: Open python or ipython and type "run grid_res.py". The
	             script will prompt you for the mesh directory, the
		     filename for the figure, and whether the projection should
		     be global lat-lon or circumpolar Antarctic.

plot_depth.py: Plots the seafloor depth for the given FESOM mesh, using the
               intermediate mesh generation file depth.out rather than the final
	       depth of the bottom-most elements (although you can un-comment
	       this option if you'd rather).
	       To run: If you want to read a different file, say depth_1.out
	               instead of depth.out for a different stage of mesh
		       generation, edit this filename about halfway down the
		       file. Then open python or ipython and type
		       "run plot_depth.py". The script will prompt you for the
		       mesh directory, the filename for the figure, and whether
		       the projection should be global lat-lon or circumpolar
		       Antarctic.

plot_shelf.py: Plots the surface depth for the given FESOM mesh, i.e. the
               ice shelf draft as seen by the nodes, in a circumpolar Antarctic
	       projection.
	       To run: Open python or ipython and type "run plot_shelf.py". The
	               script will prompt you for the mesh directory, the
		       filename for the figure, and whether the projection
		       should be global lat-lon or circumpolar Antarctic.

plot_cavityflag.py: Plots the ice shelf cavity flag for the given FESOM mesh,
                    in a circumpolar Antarctic projection.
                    To run: Open python or ipython and type
		            "run plot_cavityflag.py". The script will prompt you
			    for the mesh directory and the filename for the
			    figure.

plot_num_layers.py: Plots the number of vertical layers for each element in
                    the given FESOM mesh, in a circumpolar Antarctic projection.
		    To run: Open python or ipython and type
		            "run plot_num_layers.py". The script will prompt you
			    for the mesh directory and the filename for the
			    figure.

plot_wct.py: Plots the water column thickness for the given FESOM grid, in a
             circumpolar Antarctic projection.
	     To run: Open python or ipython and type "run plot_wct.py". The
	             script will prompt you for the mesh directory and the
		     filename for the figure.

bwtemp.py: Creates a circumpolar plot of bottom water temperature annually
           averaged over the given year of FESOM simulation.
	   To run: Open python or ipython and type "run bwtemp.py". The script
	           will prompt you for the mesh directory, the FESOM output
		   file containing one year of ocean averages, and whether you
		   want to save the figure (and if so, what filename) or display
		   it on the screen.

bwsalt.py: Creates a circumpolar plot of bottom water salinity annually
           averaged over the given year of FESOM simulation.
	   To run: Open python or ipython and type "run bwtemp.py". The script
	           will prompt you for the mesh directory, the FESOM output
		   file containing one year of ocean averages, and whether you
		   want to save the figure (and if so, what filename) or display
		   it on the screen.

ismr_plot.py: Creates a circumpolar plot of ice shelf melt rates annually
              averaged over the given year of FESOM simulation.
	      To run: Open python or ipython and type "run ismr_plot.py". The
	              script will prompt you for the mesh directory, the FESOM
		      output file containing one year of forcing diagnostic
		      averages, and whether you want to save the figure (and if
		      so, what filename) or display it on the screen.

nsidc_aice_monthly.py: Plot monthly averages of sea ice concentration over the
                       last year of simulation with FESOM, compared with NSIDC
		       satellite data for 1995.
		       To run: First edit the NSIDC file paths if necessary.
		               Then open python or ipython and type
		               "run nsidc_aice_monthly.py". The script will
			       prompt you for the mesh directory, the FESOM
			       output file containing one year of 5-day averages
			       for sea ice variables, the month number (1-12),
			       and whether you want to save the figure (and if
			       so, what filename) or display it on the screen.
			       The script will repeat as many times as you like
			       which is handy if you want to change just one
			       parameter, e.g. the month number.

nsidc_aice_seasonal.py: Plot seasonal averages of sea ice concentration over the
                        last year of simulation with FESOM, compared with NSIDC
			satellite data for 1995.
			To run: First edit the NSIDC file paths if necessary.
			        Then open python or ipython and type
			        "run nsidc_aice_seasonal.py". The script will
				prompt you for the mesh directory, paths to
				two FESOM output files containing one year each
				of 5-day averages for sea ice variables (the
				script will use December for the first year and
				January-November for the second year so that
				DJF is a continuous time period), and whether
				you want to save the figure (and if so, what
				filename) or display it on the screen. This
				script is non-repeating.

sose_fesom_seasonal.py: Creates a 4x2 plot comparing lat vs. depth slices of
                        seasonally averaged temperature or salinity at the
			given longitude, between FESOM (given year of
			simulation) and SOSE (2005-2010 climatology).
			To run: First edit the path to the SOSE seasonal
			        climatology file if necessary (if you don't
				have this file ask Kaitlin for it). Then open
				python or ipython and type
				"run sose_fesom_seasonal.py". The script will
				prompt you for the mesh directory, paths to
				two FESOM output files containing one year each
				of 5-day avearges for ocean variables (the
				script will use December for the first year and
				January-November for the second year so that
				DJF is a continuous time period), whether you
				want to plot temperature or salinity, the
				longitude to plot, the deepest depth to plot,
				and whether you want to save the figure (and if
				so, what filename) or display it on the screen.
				The script will repeat as many times as you
				want without unnecessarily re-computing the mesh
				or asking you for all the parameters again, just
				the ones you want to change.

timeseries_seaice.py: Calculate and plot timeseries of total sea ice area and
                      volume during a FESOM simulation.
		      To run: Open python or ipython and type
		              "run timeseries_seaice.py". The script will prompt
			      you for paths to the mesh directory, the output
			      ice.mean.nc file containing one year of 5-day
			      averages, and the log file (if it already exists,
			      previously calculated values will be read from it;
			      regardless, it will be overwritten with the full
			      timeseries at the end. This allows you to process
			      one year of simulation at a time.)

timeseries_massloss.py: Calculate and plot timeseries of basal mass loss and
                        area-averaged ice shelf melt rates from major ice
		        shelves and from the entire continent during a FESOM
			simulation.
		        To run: Open python or ipython and type
		                "run timeseries_massloss.py". The script will
			        prompt you for paths to the mesh directory, the
			        output forcing.diag.nc file containing one year
			        of 5-day averages, and the log file (if it
			        already exists, previously calculated values
				will be read from it; regardless, it will be
			        overwritten with the full timeseries at the end.
			        This allows you to process one year of
				simulation at a time.)

timeseries_dpt.py: Calculate and plot timeseries of the Drake Passage transport
                   during a FESOM simulation.
		   To run: Open python or ipython and type
		           "run timeseries_dpt.py". The script will prompt you
			   for paths to the mesh directory, the output
			   oce.mean.nc file containing one year of 5-day
			   averages, and the log file (if it already exists,
			   previously calculated values will be read from it;
			   regardless, it will be overwritten with the full
			   timeseries at the end. This allows you to process
			   one year of simulation at a time.)

timeseries_3D.py: Calculate and plot timeseries of Southern Ocean total heat
                  content, average salinity, and total kinetic energy during a
		  FESOM simulation.
		  To run: Open python or ipython and type
		          "run timeseries_3D.py". The script will prompt you for
			  paths to the mesh directory, the output oce.mean.nc
			  file containing one year of 5-day averages, and the
			  log file (if it already exists, previously calculated
			  values will be read from it; regardless, it will be
			  overwritten with the full timeseries at the end. This
			  allows you to process one year of simulation at a
			  time.)

massloss_map.py: Makes a map of unexplained percent error in annually averaged
                 simulated basal mass loss from each ice shelf that is over
		 5,000 km^2 in Rignot et al., 2013.
		 To run: Make sure your logfile from timeseries_massloss.py is
		         up to date, as this script reads mass loss data from
			 that file. Then open python or ipython and type
			 "run massloss_map.py". You will be prompted for the
			 mesh directory, the log file from
			 timeseries_massloss.py, whether you want to save the
		         figure (and if so, what filename) or display it on the
		         screen, and whether you are running with Kaitlin's low
			 or high resolution mesh (if you're running with
			 something else, code in a third option and make a new
			 "area" array).

ismr_map.py: Makes a map of unexplained percent error in annually averaged
             simulated melt rate from each ice shelf that is over 5,000 km^2 in
	     Rignot et al., 2013.
	     To run: Make sure your logfile from timeseries_massloss.py is up to
	             date, as this script reads mass loss data from that file.
		     Then open python or ipython and type "run ismr_map.py".
		     You will be prompted for the mesh directory, the log file
		     from timeseries_massloss.py, whether you want to save the
		     figure (and if so, what filename) or display it on the
		     screen, and whether you are running with Kaitlin's low or
		     high resolution mesh (if you're running with something
		     else, code in a third option and make a new "area" array).

aice_hi_seasonal.py: Creates a 4x2 plot of seasonally averaged sea ice
                     concentration (top row) and thickness (bottom row) over the
		     last year of simulation.
		     To run: Open python or ipython and type
		             "run aice_hi_seasonal.py". The script will prompt
			     you for the mesh directory, paths to two FESOM
			     output files containing one year each of 5-day
			     averages for sea ice variables (the script will
			     use December for the first year and
			     January-November for the second year so that DJF
			     is a continuous time period), and whether you want
			     to save the figure (and if so, what filename) or
			     display it on the screen. This script is
			     non-repeating.

timeseries_annual.py: Given the logfiles for 5-day timeseries created using
                      timeseries_dpt.py, timeseries_seaice.py, 
		      timeseries_massloss.py, and timeseries_massloss_depth.py,
		      plot annual averages (for Drake Passage transport and ice
		      shelf melt rates/mass loss) or annual max/mins (for sea
		      ice area and volume).
		      To run: Open python or ipython and type
			      "run timeseries_annual.py". You will be prompted
			      for the paths to each log file, and whether you
			      are running with Kaitlin's low or high resolution
			      mesh (if you're running with something else, code
			      in a third option and make a new "area" array).

aice_minmax_nsidc.py: Make a 3x2 plot showing sea ice concentration from low-res
                      FESOM, high-res FESOM, and NSDIC observations for February
		      (top) and August (bottom).
		      To run: Make sure the paths near the top of the file (to
		              FESOM mesh directories, output ice.mean.nc files
			      containing 1992-2005 climatology, NSIDC files)
			      are correct. Then open python or ipython and type
			      "run aice_minmax_nsidc.py".

bw_rcp85_m_hr.py: Make a 2x1 plot showing bottom water temperature and salinity
                  anomalies for the RCP 8.5 M HR experiment (2091-2100 average
		  minus 2006-2015 average).
		  To run: Make sure the paths near the top of the file (to the
		          FESOM mesh directory and oce.mean anomaly file) are
			  correct. Then open python or ipython and type
			  "run bw_rcp85_m_hr.py".

grid_res_compare.py: Like grid_res.py, but plots low-res and high-res beside
                     each other.
		     To run: Make sure the paths to mesh directories near the
		             top of the file are correct. Then open python or
			     ipython and type "run grid_res_compare.py". The
			     script will ask if you want to plot the global
			     resolution (with colour scale maximum 225 km) or
			     circumpolar Antarctic (20 km), and if you want to
			     save the figure (and if so, what filename) or
			     display it on screen.

ismr_plot_bound.py: Like ismr_plot.py, but between specific lon/lat bounds, and
                    for any time index in the FESOM output file (not necessarily
		    annually averaged).
		    To run: Open python or ipython and type
		            "run ismr_plot_bound.py". The script will prompt you
			    for paths to the FESOM mesh directory and
			    forcing.diag.nc file, the timestep to plot, bounds
			    on longitude and latitude, and whether to save the
			    figure (and if so, what filename) or display on
			    the screen. This script repeats as many times as
			    you like.

ismr_seasonal.py: Make a 4x1 plot of seasonally averaged (DJF, MAM, JJA, SON)
                  circumpolar ice shelf melt rates.
		  To run: Open python or ipython and type
		          "run ismr_seasonal.py". The script will prompt you for
			  the paths to the FESOM mesh directory and 2 output
			  forcing.diag.nc files (each containing one year of
			  5-day averages; the script will use December from the
			  first file and Jan-Nov from the second), and whether
			  you want to save the figure (and if so, what filename)
			  or display it on the screen. This script does not
			  repeat.

temp_salt_slice.py: Make a 2x1 plot showing temperature and salinity
                    interpolated to a given longitude (i.e. latitude vs. depth
		    slices) at a single time index.
		    To run: Open python or ipython and type
		            "run temp_salt_slice.py". The script will prompt
			    you for paths to the FESOM mesh directory and
			    FESOM oce.mean.nc file, the timestep to plot,
			    longitude to interpolate to, deepest depth to plot,
			    and whether you want to save the figure (and if so,
			    what filename) or display it on the screen. This
			    script repeats as many times as you like.

temp_salt_seasonal.py: Make a 4x2 plot showing seasonally averaged temperature
                       (top) and salinity (bottom) interpolated to a given
		       longitude, i.e. latitude vs. depth slices.
		       To run: Open python or ipython and type
		               "run temp_salt_seasonal.py". The script will
			       prompt you for paths to the FESOM mesh directory
			       and 2 output oce.mean.nc files (each containing
			       one year of 5-day averages; the script will use
			       December from the first file and Jan-Nov from
			       the second), the longitude to interpolate to,
			       the deepest depth to plot, and whether you want
			       to save the figure (and if so, what filename) or
			       display it on the screen. This script repeats
			       as many times as you like.

make_zonal_slices.py: Call temp_salt_seasonal for a predetermined set of
                      longitude slices and depth bounds. Save all the figures
		      in a common directory.
		      To run: First make sure you have a climatology oce.mean
		              file containing 5-day averages, created using
			      average_years.py. Then open python or ipython and
			      type "run make_zonal_slices.py". The script will
			      prompt you for paths to the climatology file and
			      the directory to store the figures, and whether
			      it is low or high res.

massloss_percent_change.py: Make a circumpolar plot of the percentage change in
                            mass loss for each major ice shelf over the given
			    RCP simulation (2091-2100 average minus 2006-2015).
			    To run: First make sure you have run
			            timeseries_massloss.py for the years
				    1992-2100 inclusive, 5-day averages. Then
				    open python or ipython and type
				    "run massloss_percent_change.py". The script
				    will prompt you for the paths to the FESOM
				    mesh directory and the timeseries_massloss
				    logfile, and whether you want to save the
				    figure (and if so, what filename) or
				    display it on the screen.

massloss_percent_change_res.py: Make a circumpolar plot of the percentage change
                                in mass loss for each major ice shelf in the
				high-res spinup (1992-2005 average, rep3)
				compared to low-res.
				To run: First make sure you have run
				        timeseries_massloss.py for at least
					the first 3 repetitions of 1992-2005
					(5-day averages) for both the low-res
					and high-res spinups, and that the
					logfiles both have the name
					"massloss.log". Then make sure the paths
					to the mesh directories and experiment
					directories, near the top of this
					script, are correct. Then open python
					or ipython and type
					"run massloss_perecent_change_res.py".
					The figure will be saved as
					massloss_percent_change_res.png.

moc_lat_density.py: Calculate the meridional overturning streamfunction in
                    latitude-density space. This doesn't seem to quite work yet.
		    To run: Open python or ipython and type
		            "run moc_lat_density.py". The script will prompt you
			    for the paths to the FESOM mesh directory and
			    oce.mean.nc file containing one year of output, and
			    whether you want to save the figure (and if so,
			    what filename) or display it on the screen. Warning,
			    it is VERY slow!

sst_sss_seasonal.py: Creates a 4x2 plot of seasonally averaged sea surface
                     temperature (top row) and salinity (bottom row) over the
		     last year of simulation.
		     To run: Open python or ipython and type
		             "run sst_sss_seasonal.py". The script will prompt
			     you for the paths to the FESOM mesh directory and
			     two oce.mean.nc files, each containing one year of
			     5-day averages (the script will use December from
			     the first file and Jan-Nov from the second) as well
			     as whether you want to save the figure (and if so,
			     what filename) or display it on the screen. This
			     script does not repeat.

timeseries_annual_compare.py: Compare all RCP experiments and control
                              experiments by plotting timeseries on the same
			      axes: annual averages of Drake Passage transport
			      and ice shelf mass loss, annual max/mins of sea
			      ice area and volume.
			      To run: Make sure the logfiles for
			              timeseries_dpt.py, timeseries_seaice.py,
				      and timeseries_massloss.py are saved as
				      dpt.log, seaice.log, and massloss.log
				      respectively for each RCP experiment
				      (1992-2100, 5-day averages) and control
				      experiment (1992-2005 repeated 10 times).
				      Then make sure the paths to these
				      experiment directories, near the top of
				      the script, are correct. Then open python
				      or ipython and type
				      "run timeseries_annual_compare.py". The
				      script will create a bunch of png files.

timeseries_cavity_ts.py: Plot timeseries of the annually-averaged,
                         volume-averaged temperature and salinity in each ice
			 shelf cavity.
			 To run: Change the naming convention for FESOM output
			         files from "MK44005" to whatever it should be
				 in the variable file_head. Then open python or
				 ipython and type "run timeseries_cavity_ts.py".
				 The script will prompt you for the paths to the
				 FESOM mesh directory and output directory
				 (containing one oce.mean.nc file for each
				 year), the years to process, and the directory
				 to save the figures into.

timeseries_concat.py: For the logfiles from timeseries_dpt.py,
                      timeseries_seaice.py, and timeseries_massloss.py, append
		      the third repetition of the forcing in the control
		      simulation (1992-2005) to the beginning of the RCP
		      (2006-2100).
		      To run: First make sure you have run the 3 timeseries
		              scripts for the correct control simulation
			      (1992-2005 repeated at least 3 times) and the
			      RCP (2006-2100), and that these are saved with the
			      names dpt.log, seaice.log, and massloss.log in the
			      relevant experiment directories. Then open python
			      or ipython and type "run timeseries_concat.py".
			      The script will prompt you for the paths to these
			      2 experiment directories, and it will modify the
			      existing logfiles for the RCP.

timeseries_rep3.py: Given the logfiles for 5-day timeseries created using
                    timeseries_dpt.py, timeseries_seaice.py, and
		    timeseries_massloss.py for a given control simulation
		    (1992-2005 repeated a bunch of times), plot just the third
		    repetition of the forcing.
		    To run: First make sure you have run the 3 timeseries
		            scripts for the control simulation. Then open python
			    or ipython and type "run timeseries_rep3.py". The
			    script will prompt you for the paths to these 3
			    logfiles, and whether you have low or high
			    resolution. The script will create a bunch of png
			    files.

timeseries_rep3_compare.py: Plot Drake Passage transport and ice shelf melt
                            rates/mass loss for the third repetition of the
			    spinup forcing (1992-2005), for both the low-res and
			    high-res control simulations.
			    To run: First make sure you have run
			            timeseries_dpt.py and timeseries_massloss.py
				    for both the low-res and high-res
				    simulations, with the logfiles saved as
				    dpt.log and massloss.log in the correct
				    experiment directories. Then make sure the
				    paths to the experiment directories near the
				    top of the script are correct. Then open
				    python or ipython and type
				    "run timeseries_rep3_compare.py". The
				    script will create a bunch of png files.

ts_distribution.py: Make a temperature-salinity distribution plot, showing the
                    volume of each water mass with a log scale, including the
		    surface freezing point line and density contours.
		    To run: Open python or ipython and type
		            "run ts_distribution.py". The script will prompt you
			    for paths to the FESOM mesh directory and
			    oce.mean.nc file, the time index to plot, and
			    whether you want to save the figure (and if so, what
			    filename) or display on the screen. If the water
			    masses are getting cut off you can adjust the
			    temperature and salinity bounds (min_salt etc.) and
			    possibly also the density contours (density_lev
			    as well as manual_locations for the labels).

ts_animation.py: Like ts_distribution.py, but make one figure for each year in
                 the given date range (annually averaged). Save as a bunch of
		 png files which can be stitched together later into an
		 animation, using ffmpeg or something similar.
		 To run: Open python or ipython and type "run ts_animation.py".
		         The script will prompt you for paths to the FESOM mesh
			 directory and output directory (containing one
			 oce.mean.nc file for each year), the range of years to
			 process, and the directory to save the figures into.

plot_mask.py: Plot the mask created by restoring_mask.py and display on the
              screen.
	      To run: First make sure you have run restoring_mask.py and have
	              the output file ssrestoring_mask.out saved in your FESOM
		      mesh directory. Then open python or ipython and type
		      "run plot_mask.py". The script will prompt you for the
		      path to the mesh directory, and whether you want the
		      plot to be global or circumpolar Antarctic.

timeseries_massloss_depth.py: Plot timeseries of total basal mass loss and
                              area-averaged ice shelf melt rates split up into
			      3 different depth classes for the ice shelf draft.
			      To run: Open python or ipython and type
		                      "run timeseries_massloss_depth.py".
				      The script will prompt you for paths to
				      the mesh directory, the output
				      orcing.diag.nc file containing one year
				      of 5-day averages, and the log file (if it
				      already exists, previously calculated
				      values will be read from it; regardless,
				      it will be overwritten with the full
				      timeseries at the end. This allows you to
				      process one year of simulation at a time.)

plot_mld.py: Plot the mixed layer depth (defined as in Sallee et al 2013: depth
             where potential density exceeds surface density by 0.03 kg/m^3).
	     To run: Open python or ipython and type "run plot_mld.py". The
	             script will prompt you for the paths to the FESOM mesh
		     directory and output oce.mean.nc file, the time index to
		     plot, whether you want a global or circumpolar domain,
		     optional upper bound on the colour scale, and whether you
		     want to save the figure (and if so, what filename) or
		     display it on the screen. This script repeats as many times
		     as you like.

mld_jja_diff.py: Make a circumpolar Antarctic plot of the change in the winter
                 (JJA average) mixed layer depth (defined as in Sallee et al
		 2013: depth at which potential density is 0.03 kg/m^3 higher
		 than at the surface) in the last 10 years of the RCP compared
		 to the first 10 years.
		 To run: First run average_years.py to create oce.mean.nc 5-day
		         climatologies for the first 10 years and last 10 years
			 of the RCP. Then open python or ipython and type
			 "run mld_jja_diff.py". The script will prompt you for
			 the paths to the FESOM mesh directory and the two
			 oce.mean.nc climatology files, optional upper bound
			 for colour scale, and whether you want to save the
			 figure (and if so, what filename) or display it on
			 the screen.

timeseries_drift.py: Plot timeseries of the annually-averaged, volume-averaged
                    temperature and salinity between the given latitude and
		    depth bounds.
		    To run: Change the naming convention for FESOM output files
			    from "MK44005" to whatever it should be in the
			    variable file_head. Then open python or ipython and
			    type "run timeseries_drift.py". The script will
			    prompt you for the paths to the FESOM mesh
			    directory and output directory (containing one
			    oce.mean.nc file for each year), the years to
			    process, the log file (if it already exists,
			    previously calculated values will be read from it;
			    regardless, it will be overwritten with the full
			    timeseries at the end. This allows you to process
			    one forcing repetition at a time), and the filename
			    for the figure.

timeseries_isfront_ts.py: Like timeseries_cavity_ts.py, but averaging over
                          elements at the ice shelf front (any depth) rather
			  than the entire cavity.
			  To run: Change the naming convention for FESOM output
			          files from "MK44005" to whatever it should be
				  in the variable file_head. Then open python
				  or ipython and type
				  "run timeseries_isfront_ts.py". The script
				  will prompt you for the paths to the FESOM
				  mesh directory and output directory
				  (containing one oce.mean.nc file for each
				  year), the years to process, and the
				  directory to save the figures into.


*****BACK END*****

fesom_grid.py: Classes and routines to build an object-oriented FESOM grid
               data structure. Includes the classes Node and Element, and the
	       main function fesom_grid.
	       To run: You probably won't run this on its own, but if you need
	               an array of Element objects for any reason then open
		       python or ipython and type "from fesom_grid import *"
		       followed by
		       "elements = fesom_grid(mesh_path, circumpolar)" where
		       mesh_path is the path to the directory containing your
		       mesh files, and circumpolar is a boolean indicating
		       whether to build the data structure with a global lat-lon
		       projection (False) or a circumpolar Antarctic projection
		       (True).

fesom_sidegrid.py: Classes and routines to extract a zonal slice (depth vs.
                   latitude) of the FESOM grid as built in fesom_grid.py.
		   Includes the classes SideNode, SideNodePair, and SideElement,
		   the main function fesom_sidegrid, and some helper functions
		   doing nasty triangle interpolation and things like that.
		   To run: You will probably never run this on its own, and I
		           would recommend trying to avoid doing so because
			   it's a bit complicated. It just exists for
		           zonal_slice_plot.py and timeseries_dpt.py, so if you
			   really need to call it on its own for for some
			   reason, follow what those files do.

fesom_intersectgrid.py: Classes and routines to zonally average the FESOM grid
                        (as built in fesom_grid.py) between the given longitude
			bounds, creating a regular latitude x depth grid.
			Includes the class IntersectNode, the main function
			fesom_intersectgrid, and some helper functions doing
			nasty triangle interpolation and things like that.
			To run: You would probably never run this on its own,
			        and I would recommend trying to avoid doing so
				because it's a bit complicated. It just exists
				for zonal_avg_plot.py, so if you really need
				to call it for some reason, follow what
				zonal_avg_plot does.

patches.py: Calls fesom_grid.py and converts the Elements into triangular
            patches for plotting.
	    To run: This is called by all the existing horizontal plotting
	            routines in the last 2 sections, so you probably won't
		    need to call it directly. But if you do, open python or
		    ipython and type "from patches import *" followed by
		    "make_patches(mesh_path, circumpolar, mask_cavities)"
		    where mesh_path is the path to your mesh directory,
		    circumpolar is a boolean flag indicating whether to use
		    a global lat-lon projection (False) or a circumpolar
		    Antarctic projection (True), and mask_cavities is a
		    boolean flag indicating whether to mask out the elements
		    in ice shelf cavities (can be useful for sea ice variables).

triangle_area.py: Given the latitude and longitude of a triangular element,
                  calculate the area of the triangle in m^2. This is useful
		  for area-averages or volume-averages, as well as to calculate
		  resolution.
		  To run: You shouldn't need to, as the Element object of
		          fesom_grid.py has a class function "area" (see
			  grid_res.py for an example of how to use this).
			  But if you want to call triangle_area without the
			  whole data structure, open python or ipython and type
			  "from triangle_area import *" followed by
			  "triangle_area(lon, lat)" where lon and lat are both
			  arrays of length 3 containing longitude values (in
			  degrees east) and latitude values (in degrees north).
			  It doesn't matter whether lon is from -180 to 180
			  or from 0 to 360, because this script will convert
			  everything to Cartesian coordinates anyway.

triangle_area_latdepth.py: Given the latitude and depth of a triangular
                           segment of a SideElement, calculate the area of the
			   triangle in m^2. This is useful for calculating
			   zonal transport.
			   To run: You shouldn't need to, as the SideElement
			           object of fesom_sidegrid.py has a class
				   function "area" (see timeseries_dpt for an
				   example of how to use this). But if you
				   want to call triangle_area without the
				   whole data structure, open python or
				   ipython and type
				   "from triangle_area_latdepth.py import *"
				   followed by
				   "triangle_area_latdepth(lat, depth)" where
				   lat and depth are both arrays of length 3
				   containing the latitude values (in degrees
				   north) and the depth values (in metres,
				   negative).

unrotate_vector.py: Given a 2D vector on the rotated FESOM grid, unrotate it so
                    the components line up with regular lon-lat space and not
		    the rotated lon-lat that FESOM ran with.
                    To run: This is usually called within other scripts (see
		            lonlat.py for an example) but if you want to call
			    it on its own, open python or ipython and type
			    "from unrotate_vector.py import *" followed by
			    "ug, vg = unrotate_vector(rlon, rlat, ur, vr)" where
			    rlon and rlat are the rotated longitude and latitude
			    straight out of nod2d.out or nod3d.out (-180 to
			    180 or 0 to 360 doesn't matter), and ur and vr are
			    the x- and y- components of the vector at a single
			    time index, straight out of the FESOM output files
			    (such as u and v, or uice and vice, or stress_x and
			    stress_y). The output ug and vg are the x- and y-
			    components of the vector rotated to regular lon-lat
			    space.

monthly_avg.py: Calculate a monthly average of the given variable over the given
                month. This is hard-coded and ugly, because the FESOM output
		does not have a proper calendar attached to the time axis.
		To run: This is usually called within other scripts (see eg
		        nsidc_aice_monthly.py) but if you want to call it on
			its own, open python or ipython and type
			"from monthly_avg import *" followed by
			"monthly_data = monthlyavg(file_path, var, month)"
			where file_path is the path to a FESOM output file
			containing one year of 5-day averages, var is the
			variable name, and month is the month index from 0-11.
			The output monthly_data is an array of size n2d or n3d
			containing the monthly average of the given variable 
			at each 2D or 3D node.

seasonal_avg.py: Calculate seasonal averages (DJF, MAM, JJA, SON) of the given
                 variable. This is hard-coded and ugly, because the FESOM output
		 does not have a proper calendar attached to the time axis.
		 To run: This is usually called within other scripts (see eg
		         aice_hi_seasonal.py) but if you want to call it on its
			 own, open python or ipython and type
			 "from seasonal_avg import *" followed by
			 "seasonal_data = seasonal_avg(file1, file2, var)"
			 where file1 and file2 are paths to FESOM files
			 each containing one year of 5-day averages (the script
			 will use December from file1 and Jan-Nov from file2)
			 and var is the variable name. The output seasonal_data
			 is an array of size 4 by n2d or n3d containing the
			 seasonal averages of the given variable at each 2D or
			 3D node.

unrotate_grid.py: Unrotate longitude and latitude on the FESOM grid.
                  To run: This is usually called within other scripts (see eg
		          fesom_grid.py) but if you want to call it on its own,
			  open python or ipython and type
			  "from unrotate_grid import *" followed by
			  "glon, glat = unrotate_grid(rlon, rlat)" where rlon
			  and rlat are 1D arrays containing the rotated
			  longitude and latitude at each 2D or 3D node (i.e.
			  straight out of nod2d.out or nod3d.out). The output
			  glon and glat contain the geographical longitude and
			  latitude.


*****MAKING MODEL INPUT FILES OR POST-PROCESSING NEW OUTPUT FILES*****

unesco.py: Compute the UNESCO equation of state for seawater density. Fully
           vectorised.
	   To run: This function is called by timeseries_3D.py, but if you
                   need to call it individually, open python or ipython and type
		   "from unesco import *" followed by
		   "rho = unesco(temp, salt, press)" where temp, salt, and
		   press are arrays of the same dimensions (but any dimension is
		   fine), containing values for temperature (deg C), salinity
		   (psu), and pressure (bar, note that depth/10 where depth is
		   in m is close enough).

make_ini.py: Make a FESOM initial conditions text file, with all the columns
             in the right format, using ECCO2 temperature and salinity for
             January 1992.
	     To run: Edit the paths to theta_file, salt_file, and out_file
	             at the top of the script. Then open python or ipython
		     and type "run make_ini.py". 

iceberg_melt.py: Read Martin and Adcroft's monthly climatology of freshwater
                 fluxes from iceberg melt, and make an input forcing file on
		 the ERA-Interim grid.
		 To run: First edit the variables "iceberg_head",
		         "iceberg_tail", "iceberg_grid", and "era_grid" near
			 the top of the file to point to the right paths. Then
			 open python or ipython and type "run iceberg_melt.py".
			 You will be prompted or the path to the desired output
			 file.

average_years.py: Calculate a climatology of the given type of FESOM output file
                  (eg oce.mean) over the given years. It will have the same
		  frequency as the existing files (eg 5-day averages). Save to
		  a new NetCDF file.
		  To run: Make sure the variable expt_name (eg MK44005) is
		          correct for your simulation. Then open python or
			  ipython and type "run average_years.py". The script
			  will prompt you for the path to the FESOM output
			  directory, the type of file (forcing.diag, ice.diag,
			  ice.mean, oce.mean), the range of years to process,
			  and the desired output climatology file.

common_grid.py: For various 2D fields, calculate the monthly climatology of
                FESOM output and interpolate to a regular grid (quarter-degree,
		circumpolar to 50S) for easy comparison with ROMS. The fields
		are: sea surface temperature and salinity, surface heat and salt
		fluxes, sea ice concentration and thickness, ocean surface
		velocity vector, sea ice velocity vector, surface stress vector,
		and curl of the surface stress.
		To run: First make sure you have a file containing the land mask
		        on the common grid (most likely interpolated from ROMS,
			see common_grid.py in my roms_tools GitHub repo). Then
			open python or ipython and type "run common_grid.py".
			The script will prompt you for paths to the FESOM mesh
			directory and output directory, the years to calculate
			the climatology over, the land mask file discussed
			above, and the desired path to the output file.

ice_ini.py: Make an initial conditions file for the FESOM sea ice, based on
            NSIDC satellite data of monthly-averaged sea ice concentration in
	    January 1992. Wherever NSIDC concentration exceeds 15%, set the
	    initial sea ice area to 1, ice thickness to 1 m (in the Southern
	    Hemisphere) or 2 m (in the Northern Hemisphere), and snow thickness
	    to 0.2 m. Set initial sea ice velocity to 0.
	    To run: First make sure the paths to the FESOM mesh directory,
	            the NSIDC files, and the desired output files are correct.
		    Then open python or ipython and type "run ice_ini.py".

eraint_extend.py: Given ERA-Interim files for 1992-2016, each containing
                  atmospheric forcing data for multiple variables but one year
		  at a time, unravel into FESOM forcing files, each containing
		  one variable and one time of the day but all years.
		  To run: First make sure the input_dir and output_dir paths
		          near the top of the script are correct, and that
			  this script has the same naming convention as your
			  ERA-Interim files (ie AN_yyyy_subdaily.nc for 6 hour
			  variables, FC_yyyy_subdaily.nc or ER_yyyy_subdaily.nc
			  for 12 hour variables depending on the variable and
			  year). Then open python or ipython and type
			  "run eraint_extend.py".

sss_nudging.py: Interpolate the World Ocean Atlas 2013 monthly climatology of
                sea surface salinity to the ERA-Interim grid so it can be used
		as a forcing file by FESOM, for sea surface salinity restoring.
		To run: First make sure the paths near the top of the script
		        (to the World Ocean Atlas data, file containing
			ERA-Interim grid, and desired output file) are correct.
			Then open python or ipython and type
			"run sss_nudging.py".

restoring_mask.py: Make a mask for the 2D FESOM mesh indicating which nodes
                   should get surface salinity restoring (1) and which should
		   be left alone (0). The current formulation is to have
		   surface salinity restoring everywhere south of 30S except
		   for the Antarctic continental shelf (defined as regions
		   south of 60S with bathymetry shallower than 1500 m) and ice
		   shelf cavities. Write an ASCII file with the mask, similar
		   to cavity_flag_nod2d.out. To use this with FESOM switch on
		   use_restoring_mask in namelist.oce.
		   To run: If you want the mask to have different conditions,
		           edit the script accordingly. Then open python or
			   ipython and type "run restoring_mask.py". The script
			   will prompt you for the path to the FESOM mesh
			   directory, and the output file ssrestoring_mask.out
			   will be written to this directory.

seasonal_climatology.py: Create a seasonal climatology (DJF, MAM, JJA, SON) of
                         ocean variables (3D temperature and salinity) and sea
			 ice variables (2D concentration and effective
			 thickness) over the simulation. Output to NetCDF files.
			 This script assumes the FESOM output is in 5-day
			 averages.
			 To run: Make sure the variable expt_name (eg MK44005)
			         is correct for your simulation. Then open
				 python or ipython and type
				 "run seasonal_climatology.py". The script will
				 prompt you for the FESOM output directory
				 (containing one oce.mean.nc file and one
				 ice.mean.nc file for each year), the range
				 of years to process, and paths to the desired
				 output files.
